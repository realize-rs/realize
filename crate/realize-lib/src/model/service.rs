//! Service definition for Realize - Symmetric File Syncer
//!
//! This module defines the RealizeService trait for use with tarpc 0.36.

// Don't warn about types generated by tarpc::service.
#![allow(clippy::too_many_arguments)]

use std::path::PathBuf;

use base64::Engine as _;

pub type Result<T> = std::result::Result<T, RealizeError>;

#[derive(Debug, Clone, Eq, PartialEq, Hash, serde::Serialize, serde::Deserialize)]
pub struct DirectoryId(String);
impl From<String> for DirectoryId {
    fn from(value: String) -> Self {
        Self(value)
    }
}
impl From<&str> for DirectoryId {
    fn from(value: &str) -> Self {
        Self(value.to_string())
    }
}
impl std::fmt::Display for DirectoryId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(&self.0)
    }
}
impl DirectoryId {
    pub fn as_str(&self) -> &str {
        &self.0
    }
    pub fn into_string(self) -> String {
        self.0
    }
}

pub type ByteRange = (u64, u64);

#[derive(Debug, Clone, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
pub struct SyncedFile {
    pub path: PathBuf,
    pub size: u64,
    pub state: SyncedFileState,
}

#[derive(Debug, Clone, Copy, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
pub enum SyncedFileState {
    Final,
    Partial,
}

#[derive(Clone, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
pub struct Hash(pub [u8; 32]);

impl std::fmt::Debug for Hash {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(&self.base64())
    }
}

impl std::fmt::Display for Hash {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(&self.base64())
    }
}

impl Hash {
    fn base64(&self) -> String {
        base64::prelude::BASE64_STANDARD_NO_PAD.encode(&self.0)
    }

    pub fn zero() -> Self {
        Self([0u8; 32])
    }
}

#[derive(Debug, Clone, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
pub struct Signature(pub Vec<u8>);

#[derive(Debug, Clone, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
pub struct Delta(pub Vec<u8>);

#[derive(Debug, Clone, Copy, Eq, PartialEq, serde::Serialize, serde::Deserialize, Default)]
pub struct Options {
    pub ignore_partial: bool,
}

#[derive(Debug, Clone, Eq, PartialEq, serde::Serialize, serde::Deserialize, Default)]
pub struct Config {
    /// Optional write rate limit in bytes per second.
    pub write_limit: Option<u64>,
}

/// The service trait for file synchronization.
#[tarpc::service]
pub trait RealizeService {
    /// List files in a directory
    async fn list(dir_id: DirectoryId, options: Options) -> Result<Vec<SyncedFile>>;

    /// Send a byte range of a file.
    ///
    /// The 'file_size' argument indicates the intended final size of the file. If the file is larger than this after writing, it should be truncated.
    async fn send(
        dir_id: DirectoryId,
        relative_path: PathBuf,
        range: ByteRange,
        file_size: u64,
        data: Vec<u8>,
        options: Options,
    ) -> Result<()>;

    /// Read a byte range from a file
    async fn read(
        dir_id: DirectoryId,
        relative_path: PathBuf,
        range: ByteRange,
        options: Options,
    ) -> Result<Vec<u8>>;

    /// Mark a partial file as complete
    async fn finish(dir_id: DirectoryId, relative_path: PathBuf, options: Options) -> Result<()>;

    /// Compute a SHA-256 hash of the file at the given path (final or partial).
    async fn hash(
        dir_id: DirectoryId,
        relative_path: PathBuf,
        range: ByteRange,
        options: Options,
    ) -> Result<Hash>;

    /// Delete the file at the given path (both partial and final forms).
    async fn delete(dir_id: DirectoryId, relative_path: PathBuf, options: Options) -> Result<()>;

    /// Calculate a signature for the file at the given path and byte range.
    async fn calculate_signature(
        dir_id: DirectoryId,
        relative_path: PathBuf,
        range: ByteRange,
        options: Options,
    ) -> Result<Signature>;

    /// Compute a delta from the file at the given path and a given signature.
    ///
    /// If the file is empty or too short, the delta is created as if
    /// that specific range contained only 0.
    async fn diff(
        dir_id: DirectoryId,
        relative_path: PathBuf,
        range: ByteRange,
        signature: Signature,
        options: Options,
    ) -> Result<Delta>;

    /// Apply a delta to the file at the given path and byte range.
    async fn apply_delta(
        dir_id: DirectoryId,
        relative_path: PathBuf,
        range: ByteRange,
        file_size: u64,
        delta: Delta,
        options: Options,
    ) -> Result<()>;

    /// Configure the service with the given config (e.g., set write rate limit).
    async fn configure(config: Config) -> Result<Config>;
}

/// Error type used by [RealizeService].
///
/// This is limited, to remain usable through a RPC.
#[derive(thiserror::Error, Debug, serde::Serialize, serde::Deserialize)]
pub enum RealizeError {
    /// Returned by the RealizeService when given an invalid request.
    #[error("Bad request: {0}")]
    BadRequest(String),

    #[error("I/O error: {0}")]
    Io(String),

    #[error("RSync {0:?} error: {1}")]
    Rsync(RsyncOperation, String),

    #[error("Unexpected: {0}")]
    Other(String),
}

#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub enum RsyncOperation {
    Diff,
    Apply,
    Sign,
}

impl From<std::io::Error> for RealizeError {
    fn from(value: std::io::Error) -> Self {
        RealizeError::Io(value.to_string())
    }
}

impl From<anyhow::Error> for RealizeError {
    fn from(value: anyhow::Error) -> Self {
        RealizeError::Other(value.to_string())
    }
}

---
description:
globs:
alwaysApply: true
---
# All Code Change MUST compile and be tested

This rule ensures that all code changes are properly validated through compilation and testing.

<rule>
name: code_changes_validation
description: Enforces validation steps for code changes

filters:
  - type: event
    pattern: "code_change"
    file_pattern: "*.rs"

actions:
  - type: shell
    command: "cargo check"
    on_error:
      type: reject
      message: "Code changes must compile. Run cargo check and fix any issues before proceeding."

  - type: validate
    patterns:
      - pattern: "^\\s*#\\[test\\]"
        message: "Code changes must be tested. Add or update tests for the modified code."

  - type: shell
    command: "cargo test"
    on_error:
      type: reject
      message: "All tests must pass. Run cargo test and fix any failures before proceeding."

  - type: suggest
    message: |
      When making code changes, always follow these steps:
      1. Run `cargo check` and fix any compilation issues
      2. Add or update tests for the modified code
      3. Run `cargo test` and fix any test failures

      Remember:
      - Every code change must compile
      - Every new feature must have tests
      - Every bug fix must have a regression test
      - All tests must pass

examples:
  - input: |
      // Bad: Making changes without testing
      fn process(input: &str) -> String {
          input.to_uppercase()
      }

      // Good: Changes with tests
      fn process(input: &str) -> String {
          input.to_uppercase()
      }

      #[cfg(test)]
      mod tests {
          use super::*;

          #[test]
          fn test_process() {
              assert_eq!(process("hello"), "HELLO");
          }
      }
    output: "Always include tests with code changes"

metadata:
  priority: high
  version: 1.0
  always_active: true
</rule>
